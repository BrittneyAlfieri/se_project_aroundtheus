!function(){"use strict";const e=document.querySelector(".profile__edit"),t=document.querySelector("#modal-profile-form"),r=(document.querySelector(".profile__title"),document.querySelector(".profile__subtitle"),document.querySelector("#edit-modal"),t.querySelector(".modal__input_name"),t.querySelector(".modal__input_description"),document.querySelectorAll(".modal"),document.querySelector("#add-card-modal")),n=document.querySelector("#add-button");document.querySelector("#image-modal"),document.querySelector("#add-card-form"),r.querySelector(".modal__input_name"),r.querySelector(".modal__input_description");class i{constructor(e,t){let{cardData:r,handleCardClick:n}=e;var i,o,s;i=this,s=()=>{this._element.remove(),this._element=null},(o=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(o="_handleDeleteButton"))in i?Object.defineProperty(i,o,{value:s,enumerable:!0,configurable:!0,writable:!0}):i[o]=s,this._name=r.name,this._link=r.link,this._cardSelector=t,this._handleCardClick=n}_getTemplate(){return document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0)}getCardView(){this._element=this._getTemplate(),this._setEventListenersCard();const e=this._element.querySelector(".card__image"),t=this._element.querySelector(".card__title");return e.src=this._link,e.alt=`Photo of ${this._name}`,t.textContent=this._name,this._element}_setEventListenersCard(){this._element.querySelector(".card__delete").addEventListener("click",(()=>this._handleDeleteButton())),this._element.querySelector(".card__button").addEventListener("click",(()=>this._handleLikeButton())),this._element.querySelector(".card__image").addEventListener("click",(()=>this._handleCardClick({name:this._name,link:this._link})))}_handleLikeButton(){this._element.querySelector(".card__button").classList.toggle("card__heart_active")}}class o{constructor(e){this._element=document.querySelector(e),this._closeButton=this._element.querySelector(".modal__close"),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._element.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._element.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._element.addEventListener("mousedown",(e=>{e.target.classList.contains("modal_opened")&&this.close()})),this._closeButton.addEventListener("click",(()=>this.close()))}}class s extends o{constructor(e,t){super(e),this._handleSubmit=t}_getInputValues(){const e=[...this._element.querySelectorAll(".modal__input")],t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._element.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues())}))}close(){this._element.querySelector(".modal__container").reset(),super.close()}}function l(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var a=class{constructor(e,t){l(this,"toggleButtonState",(()=>{this._checkFormValidity()?this._enableButton():this.disableButton()})),l(this,"_toggleErrorMessage",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e)})),l(this,"_checkFormValidity",(()=>this._inputElements.every((e=>e.validity.valid)))),this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.remove(this._errorClass)}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_setEventListeners(){this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputElements=[...this._form.querySelectorAll(this._inputSelector)],this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkFormValidity(this._toggleErrorMessage(e)),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};const c=new class{constructor(e){let{nameSelector:t,jobSelector:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){let{name:t,job:r}=e;this._nameElement.textContent=t,this._jobElement.textContent=r}}({nameSelector:".profile__title",jobSelector:".profile__subtitle"}),u=new s("#edit-modal",(e=>{c.setUserInfo(e),u.close()})),d=new s("#add-card-modal",(e=>{y(e),d.close()})),m={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_error",errorClass:"modal__error_visible"},_=document.querySelector("#modal-profile-form"),h=document.querySelector("#add-card-form"),f=new a(m,_),p=new a(m,h);f.enableValidation(),p.enableValidation();const b=new class extends o{constructor(e){super(e)}open(e){const t=this._element.querySelector(".modal__image"),r=this._element.querySelector(".modal__image-title");t.src=e.link,t.alt=`Photo of ${e.name}`,r.textContent=e.name,super.open()}}("#image-modal");b.setEventListeners();const y=e=>{const t=new i({cardData:e,handleCardClick:e=>{b.open(e)}},"#card-template");v.addItem(t.getCardView())},v=new class{constructor(e,t){let{renderer:r}=e;this._renderer=r,this._element=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._element.prepend(e)}}({renderer:y},".gallery__cards");u.setEventListeners(),v.renderItems([{name:"Yosemite Valley",link:"https://images.unsplash.com/photo-1492305175278-3b3afaa2f31f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1131&q=80"},{name:"Lake Louise",link:"https://images.unsplash.com/photo-1553545616-b592535aa4cd?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80"},{name:"Bald Mountains",link:"https://images.unsplash.com/photo-1631745818498-579a5463598c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1471&q=80"},{name:"Latemar",link:"https://images.unsplash.com/photo-1518733262568-b51ef2fac5b4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=735&q=80"},{name:"Vanoise National Park",link:"https://images.unsplash.com/photo-1601809774049-90a98e3a10c8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=627&q=80"},{name:"Lago Di Braies",link:"https://images.unsplash.com/photo-1601893920895-e3ed4a655d27?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=735&q=80"}]),d.setEventListeners(),e.addEventListener("click",(()=>{const e=c.getUserInfo(),t=document.querySelector("#profile-name"),r=document.querySelector("#profile-description");t.value=e.name,r.value=e.job,u.open()})),n.addEventListener("click",(()=>{p.disableButton(),d.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RyxHQUFtQixJQUFqQyxTQUFFRSxHQUFVLEVBQ3RCNUcsS0FBSzZHLFVBQVlELEVBQ2pCNUcsS0FBS0MsU0FBV1osU0FBU0MsY0FBY29ILEVBQ3pDLENBRUFJLFlBQVlDLEdBQ1ZBLEVBQU1qRSxTQUFTa0UsSUFDYmhILEtBQUs2RyxVQUFVRyxFQUFLLEdBRXhCLENBRUFMLFFBQVFNLEdBQ05qSCxLQUFLQyxTQUFTaUgsUUFBUUQsRUFDeEIsR0htREEsQ0FDRUwsU0FBVWQsR0x0Q0MsbUJLMkNmdkcsRUFBWTZDLG9CQUNac0UsRUFBa0JJLFlMeEVHLENBQ25CLENBQ0UxRyxLQUFNLGtCQUNORSxLQUFNLGtLQUVSLENBQ0VGLEtBQU0sY0FDTkUsS0FBTSwrSkFFUixDQUNFRixLQUFNLGlCQUNORSxLQUFNLGtLQUVSLENBQ0VGLEtBQU0sVUFDTkUsS0FBTSxpS0FFUixDQUNFRixLQUFNLHdCQUNORSxLQUFNLGlLQUVSLENBQ0VGLEtBQU0saUJBQ05FLEtBQU0sbUtLa0RWdUYsRUFBU3pELG9CQUVUaEQsRUFBZ0JnQyxpQkFBaUIsU0FBUyxLQUN4QyxNQUFNK0YsRUFBTy9CLEVBQVNLLGNBQ2hCMkIsRUFBZ0IvSCxTQUFTQyxjQUFjLGlCQUN2QytILEVBQWVoSSxTQUFTQyxjQUFjLHdCQUU1QzhILEVBQWNwRSxNQUFRbUUsRUFBSy9HLEtBQzNCaUgsRUFBYXJFLE1BQVFtRSxFQUFLekIsSUFFMUJuRyxFQUFZMEMsTUFBTSxJQUdwQnZDLEVBQWMwQixpQkFBaUIsU0FBUyxLQUN0Q2dGLEVBQWtCNUMsZ0JBQ2xCcUMsRUFBUzVELE1BQU0sRyIsInNvdXJjZXMiOlsid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL3NjcmlwdHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaW5pdGlhbENhcmRzID0gW1xyXG4gIHtcclxuICAgIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDkyMzA1MTc1Mjc4LTNiM2FmYWEyZjMxZj9peGxpYj1yYi00LjAuMyZpeGlkPU1ud3hNakEzZkRCOE1IeHdhRzkwYnkxd1lXZGxmSHg4ZkdWdWZEQjhmSHg4JmF1dG89Zm9ybWF0JmZpdD1jcm9wJnc9MTEzMSZxPTgwXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxha2UgTG91aXNlXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNTUzNTQ1NjE2LWI1OTI1MzVhYTRjZD9peGxpYj1yYi00LjAuMyZpeGlkPU1ud3hNakEzZkRCOE1IeHdhRzkwYnkxd1lXZGxmSHg4ZkdWdWZEQjhmSHg4JmF1dG89Zm9ybWF0JmZpdD1jcm9wJnc9MTQ3MCZxPTgwXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkJhbGQgTW91bnRhaW5zXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNjMxNzQ1ODE4NDk4LTU3OWE1NDYzNTk4Yz9peGxpYj1yYi00LjAuMyZpeGlkPU1ud3hNakEzZkRCOE1IeHdhRzkwYnkxd1lXZGxmSHg4ZkdWdWZEQjhmSHg4JmF1dG89Zm9ybWF0JmZpdD1jcm9wJnc9MTQ3MSZxPTgwXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxhdGVtYXJcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE1MTg3MzMyNjI1NjgtYjUxZWYyZmFjNWI0P2l4bGliPXJiLTQuMC4zJml4aWQ9TW53eE1qQTNmREI4TUh4d2FHOTBieTF3WVdkbGZIeDhmR1Z1ZkRCOGZIeDgmYXV0bz1mb3JtYXQmZml0PWNyb3Amdz03MzUmcT04MFwiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJWYW5vaXNlIE5hdGlvbmFsIFBhcmtcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE2MDE4MDk3NzQwNDktOTBhOThlM2ExMGM4P2l4bGliPXJiLTQuMC4zJml4aWQ9TW53eE1qQTNmREI4TUh4d2FHOTBieTF3WVdkbGZIeDhmR1Z1ZkRCOGZIeDgmYXV0bz1mb3JtYXQmZml0PWNyb3Amdz02MjcmcT04MFwiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYWdvIERpIEJyYWllc1wiLFxyXG4gICAgbGluazogXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTYwMTg5MzkyMDg5NS1lM2VkNGE2NTVkMjc/aXhsaWI9cmItNC4wLjMmaXhpZD1Nbnd4TWpBM2ZEQjhNSHh3YUc5MGJ5MXdZV2RsZkh4OGZHVnVmREI4Zkh4OCZhdXRvPWZvcm1hdCZmaXQ9Y3JvcCZ3PTczNSZxPTgwXCIsXHJcbiAgfSxcclxuXTtcclxuXHJcbmNvbnN0IGNvbnRhaW5lclNlbGVjdG9ycyA9IHtcclxuICBjYXJkU2VjdGlvbjogXCIuZ2FsbGVyeV9fY2FyZHNcIixcclxuICBjYXJkU2VsZWN0b3I6IFwiI2NhcmQtdGVtcGxhdGVcIixcclxuICBwcmV2aWV3UG9wdXA6IFwiI2ltYWdlLW1vZGFsXCIsXHJcbiAgcHJvZmlsZUVkaXRGb3JtOiBcIiNlZGl0LW1vZGFsXCIsXHJcbiAgY2FyZEFkZEZvcm06IFwiI2FkZC1jYXJkLW1vZGFsXCIsXHJcbn07XHJcblxyXG5jb25zdCBwcm9maWxlRWRpdE9wZW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2VkaXRcIik7XHJcbmNvbnN0IHByb2ZpbGVGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtb2RhbC1wcm9maWxlLWZvcm1cIik7XHJcbmNvbnN0IHByb2ZpbGVFZGl0VGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX3RpdGxlXCIpO1xyXG5jb25zdCBwcm9maWxlRWRpdERlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19zdWJ0aXRsZVwiKTtcclxuY29uc3QgbW9kYWxFZGl0UG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2VkaXQtbW9kYWxcIik7XHJcbmNvbnN0IG1vZGFsVGl0bGVJbnB1dCA9IHByb2ZpbGVGb3JtLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2lucHV0X25hbWVcIik7XHJcbmNvbnN0IG1vZGFsRGVzY3JpcHRpb25JbnB1dCA9IHByb2ZpbGVGb3JtLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIubW9kYWxfX2lucHV0X2Rlc2NyaXB0aW9uXCJcclxuKTtcclxuY29uc3QgcG9wdXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbFwiKTtcclxuXHJcbmNvbnN0IGNhcmRBZGRQb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYWRkLWNhcmQtbW9kYWxcIik7XHJcbmNvbnN0IGNhcmRBZGRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FkZC1idXR0b25cIik7XHJcbmNvbnN0IGltYWdlUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2ltYWdlLW1vZGFsXCIpO1xyXG5jb25zdCBjYXJkQWRkRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYWRkLWNhcmQtZm9ybVwiKTtcclxuY29uc3QgY2FyZE5hbWVWYWx1ZSA9IGNhcmRBZGRQb3B1cC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbnB1dF9uYW1lXCIpO1xyXG5jb25zdCBjYXJkTGlua1ZhbHVlID0gY2FyZEFkZFBvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2lucHV0X2Rlc2NyaXB0aW9uXCIpO1xyXG5cclxuZXhwb3J0IHtcclxuICBpbml0aWFsQ2FyZHMsXHJcbiAgcHJvZmlsZUVkaXRPcGVuLFxyXG4gIHByb2ZpbGVGb3JtLFxyXG4gIHByb2ZpbGVFZGl0VGl0bGUsXHJcbiAgcHJvZmlsZUVkaXREZXNjcmlwdGlvbixcclxuICBtb2RhbEVkaXRQb3B1cCxcclxuICBtb2RhbFRpdGxlSW5wdXQsXHJcbiAgbW9kYWxEZXNjcmlwdGlvbklucHV0LFxyXG4gIHBvcHVwcyxcclxuICBjYXJkQWRkUG9wdXAsXHJcbiAgY2FyZEFkZEJ1dHRvbixcclxuICBjYXJkQWRkRm9ybSxcclxuICBpbWFnZVBvcHVwLFxyXG4gIGNhcmROYW1lVmFsdWUsXHJcbiAgY2FyZExpbmtWYWx1ZSxcclxuICBjb250YWluZXJTZWxlY3RvcnMsXHJcbn07XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKHsgY2FyZERhdGEsIGhhbmRsZUNhcmRDbGljayB9LCBjYXJkU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX25hbWUgPSBjYXJkRGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fbGluayA9IGNhcmREYXRhLmxpbms7XHJcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XHJcbiAgfVxyXG5cclxuICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICByZXR1cm4gZG9jdW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fY2FyZFNlbGVjdG9yKVxyXG4gICAgICAuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBnZXRDYXJkVmlldygpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnNDYXJkKCk7XHJcbiAgICBjb25zdCBpbWFnZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbiAgICBjb25zdCBpbWFnZVRpdGxlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX3RpdGxlXCIpO1xyXG4gICAgaW1hZ2VFbGVtZW50LnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICBpbWFnZUVsZW1lbnQuYWx0ID0gYFBob3RvIG9mICR7dGhpcy5fbmFtZX1gO1xyXG4gICAgaW1hZ2VUaXRsZS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnNDYXJkKCkge1xyXG4gICAgdGhpcy5fZWxlbWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19kZWxldGVcIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLl9oYW5kbGVEZWxldGVCdXR0b24oKSk7XHJcblxyXG4gICAgdGhpcy5fZWxlbWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19idXR0b25cIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLl9oYW5kbGVMaWtlQnV0dG9uKCkpO1xyXG4gICAgdGhpcy5fZWxlbWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKVxyXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+XHJcbiAgICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKHsgbmFtZTogdGhpcy5fbmFtZSwgbGluazogdGhpcy5fbGluayB9KVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUxpa2VCdXR0b24oKSB7XHJcbiAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2J1dHRvblwiKVxyXG4gICAgICAuY2xhc3NMaXN0LnRvZ2dsZShcImNhcmRfX2hlYXJ0X2FjdGl2ZVwiKTtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVEZWxldGVCdXR0b24gPSAoKSA9PiB7XHJcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XHJcbiAgfTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9jbG9zZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fY2xvc2VcIik7XHJcbiAgICB0aGlzLl9oYW5kbGVFc2NDbG9zZSA9IHRoaXMuX2hhbmRsZUVzY0Nsb3NlLmJpbmQodGhpcyk7XHJcbiAgfVxyXG4gIF9oYW5kbGVFc2NDbG9zZShldnQpIHtcclxuICAgIGlmIChldnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9XHJcbiAgb3BlbigpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1vZGFsX29wZW5lZFwiKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGV2dCkgPT4ge1xyXG4gICAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9vcGVuZWRcIikpIHtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2Nsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLmNsb3NlKCkpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlU3VibWl0KSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2hhbmRsZVN1Ym1pdCA9IGhhbmRsZVN1Ym1pdDtcclxuICB9XHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgY29uc3QgaW5wdXRFbGVtZW50cyA9IFsuLi50aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2lucHV0XCIpXTtcclxuICAgIGNvbnN0IGZvcm1WYWx1ZXMgPSB7fTtcclxuXHJcbiAgICBpbnB1dEVsZW1lbnRzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGZvcm1WYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBmb3JtVmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldmVudCkgPT4ge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9oYW5kbGVTdWJtaXQodGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jb250YWluZXJcIikucmVzZXQoKTtcclxuXHJcbiAgICBzdXBlci5jbG9zZSgpO1xyXG4gIH1cclxufVxyXG4iLCJjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihjb25maWcsIGZvcm1FbGVtZW50KSB7XHJcbiAgICB0aGlzLl9mb3JtID0gZm9ybUVsZW1lbnQ7XHJcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gY29uZmlnLmlucHV0U2VsZWN0b3I7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IGNvbmZpZy5zdWJtaXRCdXR0b25TZWxlY3RvcjtcclxuICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSBjb25maWcuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IGNvbmZpZy5pbnB1dEVycm9yQ2xhc3M7XHJcbiAgICB0aGlzLl9lcnJvckNsYXNzID0gY29uZmlnLmVycm9yQ2xhc3M7XHJcbiAgfVxyXG5cclxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VFbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcclxuICAgICk7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JNZXNzYWdlRWxlbWVudC50ZXh0Q29udGVudCA9IGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZTtcclxuICAgIGVycm9yTWVzc2FnZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTtcclxuICB9XHJcblxyXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGVycm9yTWVzc2FnZUVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlO1xyXG4gICAgZXJyb3JNZXNzYWdlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgZGlzYWJsZUJ1dHRvbigpIHtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIF9lbmFibGVCdXR0b24oKSB7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlQnV0dG9uU3RhdGUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBpc0Zvcm1WYWxpZCA9IHRoaXMuX2NoZWNrRm9ybVZhbGlkaXR5KCk7XHJcbiAgICBpZiAoaXNGb3JtVmFsaWQpIHtcclxuICAgICAgdGhpcy5fZW5hYmxlQnV0dG9uKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmRpc2FibGVCdXR0b24oKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBfdG9nZ2xlRXJyb3JNZXNzYWdlID0gKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgX2NoZWNrRm9ybVZhbGlkaXR5ID0gKCkgPT5cclxuICAgIHRoaXMuX2lucHV0RWxlbWVudHMuZXZlcnkoKGlucHV0KSA9PiBpbnB1dC52YWxpZGl0eS52YWxpZCk7XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9pbnB1dEVsZW1lbnRzID0gWy4uLnRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9pbnB1dFNlbGVjdG9yKV07XHJcblxyXG4gICAgdGhpcy5faW5wdXRFbGVtZW50cy5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICB0aGlzLl9jaGVja0Zvcm1WYWxpZGl0eSh0aGlzLl90b2dnbGVFcnJvck1lc3NhZ2UoaW5wdXRFbGVtZW50KSk7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZvcm1WYWxpZGF0b3I7XHJcbiIsImltcG9ydCBcIi4uL3BhZ2VzL2luZGV4LmNzc1wiO1xyXG5pbXBvcnQge1xyXG4gIGluaXRpYWxDYXJkcyxcclxuICBjb250YWluZXJTZWxlY3RvcnMsXHJcbiAgcHJvZmlsZUVkaXRPcGVuLFxyXG4gIGNhcmRBZGRCdXR0b24sXHJcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgQ2FyZCBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvXCI7XHJcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9zY3JpcHRzL0Zvcm1WYWxpZGF0b3JcIjtcclxuXHJcbmNvbnN0IG5hbWVTZWxlY3RvciA9IFwiLnByb2ZpbGVfX3RpdGxlXCI7XHJcbmNvbnN0IGpvYlNlbGVjdG9yID0gXCIucHJvZmlsZV9fc3VidGl0bGVcIjtcclxuXHJcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHsgbmFtZVNlbGVjdG9yLCBqb2JTZWxlY3RvciB9KTtcclxuXHJcbmNvbnN0IHByb2ZpbGVGb3JtID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgY29udGFpbmVyU2VsZWN0b3JzLnByb2ZpbGVFZGl0Rm9ybSxcclxuICAodmFsdWVzKSA9PiB7XHJcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyh2YWx1ZXMpO1xyXG4gICAgcHJvZmlsZUZvcm0uY2xvc2UoKTtcclxuICB9XHJcbik7XHJcblxyXG5jb25zdCBjYXJkRm9ybSA9IG5ldyBQb3B1cFdpdGhGb3JtKGNvbnRhaW5lclNlbGVjdG9ycy5jYXJkQWRkRm9ybSwgKHZhbHVlcykgPT4ge1xyXG4gIHJlbmRlckNhcmQodmFsdWVzKTtcclxuICBjYXJkRm9ybS5jbG9zZSgpO1xyXG59KTtcclxuXHJcbmNvbnN0IHZhbGlkYXRpb25Db25maWcgPSB7XHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19idXR0b25cIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0X2Vycm9yXCIsXHJcbiAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JfdmlzaWJsZVwiLFxyXG59O1xyXG5jb25zdCBlZGl0Rm9ybUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21vZGFsLXByb2ZpbGUtZm9ybVwiKTtcclxuY29uc3QgY2FyZEZvcm1FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhZGQtY2FyZC1mb3JtXCIpO1xyXG5cclxuY29uc3QgZWRpdEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uQ29uZmlnLCBlZGl0Rm9ybUVsZW1lbnQpO1xyXG5jb25zdCBjYXJkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHZhbGlkYXRpb25Db25maWcsIGNhcmRGb3JtRWxlbWVudCk7XHJcblxyXG5lZGl0Rm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbmNhcmRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcbmNvbnN0IGNhcmRQcmV2aWV3ID0gbmV3IFBvcHVwV2l0aEltYWdlKGNvbnRhaW5lclNlbGVjdG9ycy5wcmV2aWV3UG9wdXApO1xyXG5jYXJkUHJldmlldy5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgcmVuZGVyQ2FyZCA9IChjYXJkRGF0YSkgPT4ge1xyXG4gIGNvbnN0IGNhcmRFbCA9IG5ldyBDYXJkKFxyXG4gICAge1xyXG4gICAgICBjYXJkRGF0YSxcclxuICAgICAgaGFuZGxlQ2FyZENsaWNrOiAoaW1hZ2VEYXRhKSA9PiB7XHJcbiAgICAgICAgY2FyZFByZXZpZXcub3BlbihpbWFnZURhdGEpO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIGNvbnRhaW5lclNlbGVjdG9ycy5jYXJkU2VsZWN0b3JcclxuICApO1xyXG4gIGNvbnRhaW5lclNlbGVjdG9yLmFkZEl0ZW0oY2FyZEVsLmdldENhcmRWaWV3KCkpO1xyXG59O1xyXG5cclxuY29uc3QgY29udGFpbmVyU2VsZWN0b3IgPSBuZXcgU2VjdGlvbihcclxuICB7XHJcbiAgICByZW5kZXJlcjogcmVuZGVyQ2FyZCxcclxuICB9LFxyXG4gIGNvbnRhaW5lclNlbGVjdG9ycy5jYXJkU2VjdGlvblxyXG4pO1xyXG5cclxucHJvZmlsZUZvcm0uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuY29udGFpbmVyU2VsZWN0b3IucmVuZGVySXRlbXMoaW5pdGlhbENhcmRzKTtcclxuY2FyZEZvcm0uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbnByb2ZpbGVFZGl0T3Blbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGNvbnN0IHVzZXIgPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xyXG4gIGNvbnN0IG5hbWVGb3JtSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtbmFtZVwiKTtcclxuICBjb25zdCBqb2JGb3JtSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZGVzY3JpcHRpb25cIik7XHJcblxyXG4gIG5hbWVGb3JtSW5wdXQudmFsdWUgPSB1c2VyLm5hbWU7XHJcbiAgam9iRm9ybUlucHV0LnZhbHVlID0gdXNlci5qb2I7XHJcblxyXG4gIHByb2ZpbGVGb3JtLm9wZW4oKTtcclxufSk7XHJcblxyXG5jYXJkQWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgY2FyZEZvcm1WYWxpZGF0b3IuZGlzYWJsZUJ1dHRvbigpO1xyXG4gIGNhcmRGb3JtLm9wZW4oKTtcclxufSk7XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3Rvcih7IG5hbWVTZWxlY3Rvciwgam9iU2VsZWN0b3IgfSkge1xyXG4gICAgdGhpcy5fbmFtZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9qb2JFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihqb2JTZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hbWU6IHRoaXMuX25hbWVFbGVtZW50LnRleHRDb250ZW50LFxyXG4gICAgICBqb2I6IHRoaXMuX2pvYkVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckluZm8oeyBuYW1lLCBqb2IgfSkge1xyXG4gICAgdGhpcy5fbmFtZUVsZW1lbnQudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgdGhpcy5fam9iRWxlbWVudC50ZXh0Q29udGVudCA9IGpvYjtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIG9wZW4oY2FyZERhdGEpIHtcclxuICAgIGNvbnN0IG1vZGFsSW1hZ2VFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbWFnZVwiKTtcclxuICAgIGNvbnN0IG1vZGFsSW1hZ2VUaXRsZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW1hZ2UtdGl0bGVcIik7XHJcblxyXG4gICAgbW9kYWxJbWFnZUVsZW1lbnQuc3JjID0gY2FyZERhdGEubGluaztcclxuICAgIG1vZGFsSW1hZ2VFbGVtZW50LmFsdCA9IGBQaG90byBvZiAke2NhcmREYXRhLm5hbWV9YDtcclxuICAgIG1vZGFsSW1hZ2VUaXRsZS50ZXh0Q29udGVudCA9IGNhcmREYXRhLm5hbWU7XHJcblxyXG4gICAgc3VwZXIub3BlbigpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IHJlbmRlcmVyIH0sIGNvbnRhaW5lclNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySXRlbXMoaXRlbXMpIHtcclxuICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFkZEl0ZW0oZWxlbWVudCkge1xyXG4gICAgdGhpcy5fZWxlbWVudC5wcmVwZW5kKGVsZW1lbnQpO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsicHJvZmlsZUVkaXRPcGVuIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicHJvZmlsZUZvcm0iLCJjYXJkQWRkUG9wdXAiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2FyZEFkZEJ1dHRvbiIsIkNhcmQiLCJjb25zdHJ1Y3RvciIsImNhcmRTZWxlY3RvciIsImNhcmREYXRhIiwiaGFuZGxlQ2FyZENsaWNrIiwidGhpcyIsIl9lbGVtZW50IiwicmVtb3ZlIiwiX25hbWUiLCJuYW1lIiwiX2xpbmsiLCJsaW5rIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfZ2V0VGVtcGxhdGUiLCJjb250ZW50IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJjbG9uZU5vZGUiLCJnZXRDYXJkVmlldyIsIl9zZXRFdmVudExpc3RlbmVyc0NhcmQiLCJpbWFnZUVsZW1lbnQiLCJpbWFnZVRpdGxlIiwic3JjIiwiYWx0IiwidGV4dENvbnRlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiX2hhbmRsZURlbGV0ZUJ1dHRvbiIsIl9oYW5kbGVMaWtlQnV0dG9uIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiX2Nsb3NlQnV0dG9uIiwiX2hhbmRsZUVzY0Nsb3NlIiwiYmluZCIsImV2dCIsImtleSIsImNsb3NlIiwib3BlbiIsImFkZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRFdmVudExpc3RlbmVycyIsInRhcmdldCIsImNvbnRhaW5zIiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZVN1Ym1pdCIsInN1cGVyIiwiX2hhbmRsZVN1Ym1pdCIsIl9nZXRJbnB1dFZhbHVlcyIsImlucHV0RWxlbWVudHMiLCJmb3JtVmFsdWVzIiwiZm9yRWFjaCIsImlucHV0IiwidmFsdWUiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwicmVzZXQiLCJjb25maWciLCJmb3JtRWxlbWVudCIsIl9jaGVja0Zvcm1WYWxpZGl0eSIsIl9lbmFibGVCdXR0b24iLCJkaXNhYmxlQnV0dG9uIiwiaW5wdXRFbGVtZW50IiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9oaWRlSW5wdXRFcnJvciIsIl9zaG93SW5wdXRFcnJvciIsIl9pbnB1dEVsZW1lbnRzIiwiZXZlcnkiLCJfZm9ybSIsIl9pbnB1dFNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsImVycm9yTWVzc2FnZUVsZW1lbnQiLCJpZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX3N1Ym1pdEJ1dHRvbiIsImRpc2FibGVkIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiX3RvZ2dsZUVycm9yTWVzc2FnZSIsInRvZ2dsZUJ1dHRvblN0YXRlIiwiZW5hYmxlVmFsaWRhdGlvbiIsInVzZXJJbmZvIiwibmFtZVNlbGVjdG9yIiwiam9iU2VsZWN0b3IiLCJfbmFtZUVsZW1lbnQiLCJfam9iRWxlbWVudCIsImdldFVzZXJJbmZvIiwiam9iIiwic2V0VXNlckluZm8iLCJ2YWx1ZXMiLCJjYXJkRm9ybSIsInJlbmRlckNhcmQiLCJ2YWxpZGF0aW9uQ29uZmlnIiwiZWRpdEZvcm1FbGVtZW50IiwiY2FyZEZvcm1FbGVtZW50IiwiZWRpdEZvcm1WYWxpZGF0b3IiLCJGb3JtVmFsaWRhdG9yIiwiY2FyZEZvcm1WYWxpZGF0b3IiLCJjYXJkUHJldmlldyIsIm1vZGFsSW1hZ2VFbGVtZW50IiwibW9kYWxJbWFnZVRpdGxlIiwiY2FyZEVsIiwiaW1hZ2VEYXRhIiwiY29udGFpbmVyU2VsZWN0b3IiLCJhZGRJdGVtIiwicmVuZGVyZXIiLCJfcmVuZGVyZXIiLCJyZW5kZXJJdGVtcyIsIml0ZW1zIiwiaXRlbSIsImVsZW1lbnQiLCJwcmVwZW5kIiwidXNlciIsIm5hbWVGb3JtSW5wdXQiLCJqb2JGb3JtSW5wdXQiXSwic291cmNlUm9vdCI6IiJ9